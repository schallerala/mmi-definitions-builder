
The proof uses the notion of a leftmost derivation of a word in a context-free grammar.
A leftmost derivation is characterized by the property that at each step a production rule is applied to the leftmost variable in the current word.
In other words, the derivation

eqn:LMDerivation
S = _0 _1 _m w

is leftmost if, when we represent  as

_i = u_i A_i _i, u_i T^*, A_i V, _i (T V)^*,

then  comes from a production :
equation
eqn:Leftmost
_i = u_i A_i _i u_i _i _i = u_i+1 _i+1 = _i+1.
equation
(This means in particular that  is a prefix of .)

A leftmost derivation always exists: it can be obtained from a derivation tree by the depth-first traversal.

proof[Proof of Theorem thm:CFLtoPDA]
Let  be a context-free grammar such that .
We construct a PDA that simulates leftmost derivations of words in  and accepts them by the empty stack.

The PDA will have the following structure:

M = (q, T, T V, , q, S, ).

(
It has only one state, thus everything is about changing the stack content.
The transition rules are as follows:

(q, , A) = (q, ) (A ) P, (q, a, a) = (q, ).

In other words,
align
(q, w, A) &M (q, w, )  whenever  (A ) P eqn:FirstRule

(q, aw, a) &M (q, w, ) eqn:SecondRule
align
Let us show that  accepts all words generated by .
From the definition of a leftmost derivation of  it is clear that each  is a prefix of : .
The transition rules allow to transform the ID  to :

(q, v_i, A_i_i) M (q, v_i, _i_i) M* (q, v_i+1, A_i+1_i+1).

First, the rule eqn:FirstRule is applied, and then a sequence (maybe empty) of rules eqn:SecondRule.
Going over  from  to  one transforms  to .

Conversely, emptying the stack with the help of the rules eqn:FirstRule and eqn:SecondRule
can be interpreted as a derivation of a word in the grammar .
proof
