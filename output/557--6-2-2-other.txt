proof
Let  be the language accepted by a DFA with the set of states , where  is the initial state.
Our goal is to construct a regular expression  that describes .

Denote by  the set of all words  such that
itemize
;
 for all proper prefixes  of .
itemize
In other words,  is the set of all words that lead you from  to 
through the states with indices less or equal  only.
Note that we allow  or  to be bigger than : one may be in a state with number bigger than  at the beginning or at the end, but not in between.
One has

R = _q_j F R_1j^n.

We will prove by induction on  that each of  can be represented by a regular expression.

Base: .
By definition,  consists of direct transitions from  to . Thus

R_ij^0 =
cases
a (q_i, a) = q_j, & if  i j,

a (q_i, a) = q_j , & if  i = j.
cases

In both cases, the set  is finite and therefore described by a regular expression of the following form:

r_ij^0 =
cases
a_1 + + a_p, & if  i j  and  R_ij^0 = a_1, , a_p,

, & if  i j  and  R_ij^0 = ,

a_1 + + a_p + , & if  i = j  and  R_ij^0 = a_1, , a_p,

, & if  i = j  and R_ij^0 = .
cases


Step. Let us prove that for  and for all  one has

R_ij^k = R_ij^k-1 R_ik^k-1 (R_kk^k-1)^* R_kj^k-1.

Indeed, take any  and look at the corresponding path from  to .
If this path does not pass through , then .
Otherwise split the path into the following pieces:
itemize
from  to  without passing through ;
from  to  without passing through  (there may be several pieces like this);
from  to  without passing through .
itemize
This represents the word  as a concatenation , where

w_1 R_ik^k-1, w_2, , w_m-1 R_kk^k-1, w_m R_kj^k-1.

Thus .
It is also clear than any  or  leads from  to 
without passing through states with the number .

By induction assumption, for all  there is a regular expression  which describes the language .
The language  is then described by the regular expression

r_ij^k = r_ij^k-1 + r_ik^k-1 (r_kk^k-1)^* r_kj^k-1.


Finally, the language  is described by the regular expression

r = r_1,m+1^n + + r_1,n^n,

where .
proof

