proof
Let  be a context-free grammar possibly containing - and unit productions.
We construct a grammar  without -productions such that .

First, identify nullable variables, those which derive .
This is done recursively.
Initialize the set of nullable variables by those  for which there is a production .
The recursion step adds to the set of nullable variables those  for which 
and all  are nullable.
As soon as this recursion does not find new nullable variables, the algorithm stops.

Second, remove from  all -productions  and add new productions in the following way.
Let  be a production with some of  nullable variables
(recall that  can stand for a variable symbol as well as for a terminal symbol).
We add all productions of the form ,
where  means that we remove any subset of nullable variables
(with one exception: if all  are nullable,
then we do not add the production  obtained by removing all nullable variables).
That is, if  symbols among  are nullable variables, then the production 
gives rise to  productions if  and to  productions if .

It can be checked that the new set of productions allows to derive all words (except ) which were derivable
with the initial set of productions, and only those words.

Now we construct a grammar  equivalent to  but without unit productions.
Call a pair  unit pair, if .
The set of all unit pairs can be found recursively.

Remove all unit productions, and for each unit pair  and each non-unit production  add the production .
Every word generated by the grammar  is also generated by :
the new direct productions  are compositions of two old productions
.
Every word generated by  is generated by : a series of unit productions must always end with a non-unit production,
so if we had ,
then we have .
Thus the new set of productions generates the same language as before.
proof
It is important to remove first the -productions and then the unit productions.
If first the unit, and then -productions are removed, then the result might contain unit productions.
