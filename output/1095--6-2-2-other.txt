proof
We describe a construction algorithm of an -NFA that accepts the language described by a given regular expression .
Moreover, the resulting automaton will have a unique accepting state.
The construction uses the recursive structure of the regular expression.

Let  be any regular expression.
By definition,  is either basic or is obtained from one or two simpler expressions through sum, concatenation or closure.

If  is basic, then the corresponding language is accepted by one of the automata shown in Figure fig:AutomBasicRegExpr.

figure[ht]
center

center
Automata for basic regular expressions.
fig:AutomBasicRegExpr
figure

If , then by assumption there are -NFAs  and ,
each with a unique final state, for the languages represented by  and .
The automaton in Figure fig:AutomSum accepts the language of the expression .

figure[ht]
center

center
Automaton realizing the union of two languages.
fig:AutomSum
figure

If , then we combine the automata for  and  as shown in Figure fig:AutomConcat.

figure[ht]
center

center
Automaton realizing the concatenation of two languages.
fig:AutomConcat
figure

Finally, the automaton in Figure fig:AutomClosure accepts the language of .

figure[ht]
center

center
Automaton realizing the Kleene closure of a language.
fig:AutomClosure
figure

In order to show that these automata do what they are meant to do, one has to prove two things:
first, each word from the language  (respectively, , or ) is accepted by the automaton;
second, each word accepted by the automaton belongs to the respective language.
The arguments proving this are rather straightforward, and we omit them.
proof
